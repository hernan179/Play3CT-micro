pipeline {
   agent any
    tools {
        maven 'maven3.8.8'
    }
    parameters {
            string(name: 'fullURL', defaultValue: '')
            string(name: 'despliegue', defaultValue: '')
    }
    stages {
        stage('Build'){
            steps {
                echo 'Without Checkout';
                //git 'https://github.com/hernan179/Play3CT.git'
                sh 'mvn clean install -DskipTests -B -ntp'
                echo '======================= ansible local ==============='
                sh "set" 
            }
        }
         stage('Testing'){
            steps {
                echo 'Testing...'
                sh 'mvn test -B -ntp'
            }
            post{
                success{
                    echo 'executing jacoco..'
                    jacoco()
                    echo 'excuting JUnit...'
                    junit 'target/surefire-reports/*.xml'
                }
                always{
                    echo 'Validation was done'
                }
                failure {
                    echo 'Error was out come while it was processing'
                }
            }
        }
        stage('sonar'){
            steps{
                echo 'Quality with sonar qube!'
                withSonarQubeEnv('sonarqube'){ 
                    sh 'mvn clean package sonar:sonar'
                }
                  echo 'passed test with sonarqube...'
            }
        }
        stage('artifactory'){
            steps {
                 script {
                    def pom = readMavenPom file: 'pom.xml'
                    def version = pom.version; 
                    def artifactId = pom.artifactId; 
                    env.despliegue = 'http://3.17.160.80:8080/'+artifactId+'-'+version+'/contact/ping';
                    def server = Artifactory.server 'artifactory-test'
                    def repository = "Play3CT";
                    def empack = pom.packaging;
   
                    if(env.GIT_BRANCH == 'origin/master'){
                        repository = repository + '-PROD'
                    }else{
                         repository = repository + '-PROD'
                    }
                    env.fullURL = server.url+'/'+repository+'/'+artifactId+'-'+version+'.'+empack;
                    def uploadSpec = """
                        {
                            "files": [
                                {
                                    "pattern": "target/.*.$empack",
                                    "target": "$repository",
                                    "regexp": "true"
                                }
                            ]
                        }
                    """
                  server.upload spec: uploadSpec
                 }
            }
        }
        stage('Deploy'){
            steps {
             sh 'ansible --version'
             sh 'env | sort'
             sshagent (credentials: ['jboss-private-key']) {
             sh 'ansible-inventory -i hosts --list -y'
             sh 'ansible-playbook -i hosts playbooks/server1_jboss.yml -e dwnld='+env.fullURL
             echo "Service active on ${env.despliegue}"
             }   
         }
    
        }
    }
}

